name: Deploy
on:
  push:
    branches:
    - staging
    - prod

jobs:
  deploy:
    runs-on: ubuntu-latest
    steps:

    - name: Set Job Environment Variables
      run: |
        BRANCH=${GITHUB_REF#refs/heads/}
        echo ${BRANCH}
        if [ ${BRANCH} ==  "prod" ]; then
            TARGET_URL="https://hub.carbonplan.org/"
            ENVIRONMENT="production"
        else
            TARGET_URL="https://${BRANCH}.hub.carbonplan.org/"
            ENVIRONMENT=${BRANCH}
        fi
        echo "::set-env name=TARGET_URL::${TARGET_URL}"
        echo "::set-env name=ENVIRONMENT::${ENVIRONMENT}"
    - uses: chrnorm/deployment-action@releases/v1
      name: Create GitHub deployment
      id: deployment
      with:
        token: "${{ github.token }}"
        target_url: ${{env.TARGET_URL}}
        environment: ${{env.ENVIRONMENT}}

    - name: Install base apt packages
      run: |
        sudo apt-get update --yes -qq
        sudo apt-get install --yes -qq git-crypt jq golang-go

    - name: Checkout Repository
      uses: actions/checkout@v2
      with:
        fetch-depth: 0  # 0 indicates all history.

    - name: setup python
      uses: actions/setup-python@v2.1.2
      with:
        python-version: '3.7'

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install --upgrade -r requirements.txt

    - uses: GoogleCloudPlatform/github-actions/setup-gcloud@master
      with:
        version: '290.0.1'

    - name: setup azure cli
      run: |
        curl -sL https://aka.ms/InstallAzureCLIDeb | sudo bash
        az --version

    - name: Unlock secrets
      uses: sliteteam/github-action-git-crypt-unlock@1.1.0
      env:
        GIT_CRYPT_KEY: ${{ secrets.GIT_CRYPT_KEY }}

    - name: Build gcp-us-central1-b image if needed
      timeout-minutes: 120
      run: hubploy build gcp-us-central1-b --check-registry --push

    - name: Build az-west-us image if needed
      timeout-minutes: 120
      run: hubploy build az-west-us --check-registry --push

    - name: Install helm
      run: |
        curl https://get.helm.sh/helm-v3.1.2-linux-amd64.tar.gz | tar -xzf -
        sudo mv linux-amd64/helm /usr/local/bin

        helm version
        helm repo add pangeo https://pangeo-data.github.io/helm-chart/
        helm repo add jupyterhub https://jupyterhub.github.io/helm-chart/
        helm repo add dask-gateway https://dask.org/dask-gateway-helm-repo/
        helm repo update

    - name: Deploy gcp-us-central1-b
      run: |
        echo "hubploy deploy --cleanup-on-fail --namespace ${GITHUB_REF##*/} gcp-us-central1-b pangeo-deploy ${GITHUB_REF##*/}"
        hubploy deploy --cleanup-on-fail --namespace ${GITHUB_REF##*/} gcp-us-central1-b pangeo-deploy ${GITHUB_REF##*/}

    - name: Deploy az-west-us
      run: |
        echo "hubploy deploy --cleanup-on-fail --namespace az-west-us${GITHUB_REF##*/} az-west-us pangeo-deploy ${GITHUB_REF##*/}"
        hubploy deploy --cleanup-on-fail --namespace az-west-us${GITHUB_REF##*/} az-west-us pangeo-deploy ${GITHUB_REF##*/}

    - name: Update deployment status (success)
      if: success()
      uses: chrnorm/deployment-status@releases/v1
      with:
        token: "${{ github.token }}"
        target_url: ${{env.TARGET_URL}}
        state: "success"
        deployment_id: ${{ steps.deployment.outputs.deployment_id }}

    - name: Update deployment status (failure)
      if: failure()
      uses: chrnorm/deployment-status@releases/v1
      with:
        token: "${{ github.token }}"
        target_url: ${{env.TARGET_URL}}
        state: "failure"
        deployment_id: ${{ steps.deployment.outputs.deployment_id }}
