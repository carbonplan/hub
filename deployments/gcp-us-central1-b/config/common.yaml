daskhub:
  jupyterhub:
    scheduling:
      corePods:
        nodeAffinity:
          matchNodePurpose: require
    singleuser:
      cloudMetadata:
        enabled: true
      profileList:
        - display_name: "small (2 cores, 12GB)"
          default: "True"
          description: "Foo"
          kubespawner_override:
            cpu_limit: 2
            cpu_guarantee: 2
            mem_limit: 12G
            mem_guarantee: 12G
        - display_name: "standard (4 cores, 24GB)"
          description: "Foo"
          kubespawner_override:
            cpu_limit: 4
            cpu_guarantee: 4
            mem_limit: 24G
            mem_guarantee: 24G
        - display_name: "large (8 cores, 52GB)"
          description: "Foo"
          kubespawner_override:
            cpu_limit: 8
            cpu_guarantee: 8
            mem_limit: 52G
            mem_guarantee: 52G
        - display_name: "large GPU (8 cores, 52GB)"
          description: "Foo"
          kubespawner_override:
            image: pangeo/ml-notebook:latest
            cpu_limit: 8
            cpu_guarantee: 8
            mem_limit: 52G
            mem_guarantee: 52G
            nvidia.com/gpu: "1"
            environment: {'NVIDIA_DRIVER_CAPABILITIES': 'compute,utility'}
            tolerations: [{'key': 'nvidia.com/gpu','operator': 'Equal','value': 'present','effect': 'NoSchedule'}]
        - display_name: "very large (32 cores, 256GB)"
          description: "Foo"
          kubespawner_override:
            cpu_limit: 32
            cpu_guarantee: 32
            mem_limit: 256G
            mem_guarantee: 256G

    hub:
      resources:
        requests:
          cpu: "0.25"
          memory: 0.5Gi
        limits:
          cpu: "1.25"
          memory: 1Gi
      config:
        Authenticator:
          auto_login: true
          admin_users:
          - jhamman
          - freeman-lab
          allowed_users:
          - jhamman
          - freeman-lab
          - dcullenward
          - orianac
          - freyac
          - tcchiao
          - badgley
        GenericOAuthenticator:
          authorize_url: https://carbonplan.auth0.com/authorize
          token_url: https://carbonplan.auth0.com/oauth/token
          userdata_url: https://carbonplan.auth0.com/userinfo
          scope:
            - openid
            - name
            - profile
            - email
          username_key: nickname
        JupyterHub:
          authenticator_class: generic-oauth

  dask-gateway:
    gateway:
      extraConfig:
        # Use the mapping form, to support merging multiple values.yaml
        optionHandler: |
          from dask_gateway_server.options import Options, Integer, Float, String
          def cluster_options(user):
             def option_handler(options):
                 if ":" not in options.image:
                     raise ValueError("When specifying an image you must also provide a tag")
                 extra_annotations = {
                     "hub.jupyter.org/username": user.name,
                     "prometheus.io/scrape": "true",
                     "prometheus.io/port": "8787",
                 }
                 extra_labels = {
                     "hub.jupyter.org/username": user.name,
                 }
                 return {
                     "worker_cores_limit": options.worker_cores,
                     "worker_cores": min(options.worker_cores / 2, 1),
                     "worker_memory": "%fG" % options.worker_memory,
                     "image": options.image,
                     "scheduler_extra_pod_annotations": extra_annotations,
                     "worker_extra_pod_annotations": extra_annotations,
                     "scheduler_extra_pod_labels": extra_labels,
                     "worker_extra_pod_labels": extra_labels,
                 }
             return Options(
                 Integer("worker_cores", 2, min=1, max=32, label="Worker Cores"),
                 Float("worker_memory", 4, min=1, max=120, label="Worker Memory (GiB)"),
                 String("image", default="pangeo/pangeo-notebook:latest", label="Image"),
                 handler=option_handler,
             )
          c.Backend.cluster_options = cluster_options
      backend:
        worker:
          extraPodConfig:
            tolerations:
              - key: "cloud.google.com/gke-preemptible"
                operator: "Equal"
                value: "true"
                effect: "NoSchedule"
