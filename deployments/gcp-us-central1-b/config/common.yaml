pangeo:
  jupyterhub:
    scheduling:
      corePods:
        nodeAffinity:
          matchNodePurpose: require
    singleuser:
      cloudMetadata:
        enabled: true
      cpu:
        limit: 4
        guarantee: 1
      memory:
        limit: 14G
        guarantee: 4G

    hub:
      resources:
        requests:
          cpu: "0.25"
          memory: 0.5Gi
        limits:
          cpu: "1.25"
          memory: 1Gi
      extraConfig:
        profile_list: |
          c.KubeSpawner.profile_list = [
            {
                'display_name': 'small (n1-highmem-2 | 2 cores, 12GB)',
                'kubespawner_override': {
                    'cpu_limit': 2,
                    'cpu_guarantee': 2,
                    'mem_limit': '12G',
                    'mem_guarantee': '12G',
                }
            },
            {
                'display_name': 'standard (n1-highmem-4 | 4 cores, 24GB)',
                'kubespawner_override': {
                    'cpu_limit': 4,
                    'cpu_guarantee': 4,
                    'mem_limit': '24G',
                    'mem_guarantee': '24G',
                }
            },
            {
                'display_name': 'large (n1-highmem-8 | 8 cores, 52GB)',
                'kubespawner_override': {
                    'cpu_limit': 8,
                    'cpu_guarantee': 2,
                    'mem_limit': '50G',
                    'mem_guarantee': '26G',
                }
            },
            {
                'display_name': 'very large (n1-highmem-16 | 16 cores, 128GB)',
                'kubespawner_override': {
                    'cpu_limit': 16,
                    'cpu_guarantee': 2,
                    'mem_limit': '128G',
                    'mem_guarantee': '120G',
                }
            },
            {
                'display_name': 'TRACE: large (n1-highmem-8 | 8 cores, 52GB)',
                'kubespawner_override': {
                    'image': 'carbonplan/trace-python-notebook:main',
                    'cpu_limit': 8,
                    'cpu_guarantee': 2,
                    'mem_limit': '50G',
                    'mem_guarantee': '26G',
                }
            },
            {
                'display_name': 'TRACE: very large (n1-highmem-16 | 16 cores, 128GB)',
                'kubespawner_override': {
                    'image': 'carbonplan/trace-python-notebook:sha-3dae342',
                    'cpu_limit': 16,
                    'cpu_guarantee': 2,
                    'mem_limit': '128G',
                    'mem_guarantee': '120G',
                }
            },
          ]
    auth:
      type: custom
      custom:
        className: oauthenticator.generic.GenericOAuthenticator
        config:
          login_service: "CarbonPlan"
          token_url: https://carbonplan.auth0.com/oauth/token
          userdata_url: https://carbonplan.auth0.com/oauth/userinfo
          userdata_method: GET
          username_key: nickname
          scope:
            - openid
            - profile
            - email
      admin:
        access: true
        users:
          - jhamman
          - freeman-lab
      whitelist:
        users:
          - jhamman
          - freeman-lab
          - dcullenward
          - orianac
          - freyac
          - tcchiao
          - badgley
          - anderegg

  dask-gateway:
    gateway:
      extraConfig:
        # Use the mapping form, to support merging multiple values.yaml
        optionHandler: |
          from dask_gateway_server.options import Options, Integer, Float, String
          def cluster_options(user):
             def option_handler(options):
                 if ":" not in options.image:
                     raise ValueError("When specifying an image you must also provide a tag")
                 extra_annotations = {
                     "hub.jupyter.org/username": user.name,
                     "prometheus.io/scrape": "true",
                     "prometheus.io/port": "8787",
                 }
                 extra_labels = {
                     "hub.jupyter.org/username": user.name,
                 }
                 return {
                     "worker_cores_limit": options.worker_cores,
                     "worker_cores": min(options.worker_cores / 2, 1),
                     "worker_memory": "%fG" % options.worker_memory,
                     "image": options.image,
                     "scheduler_extra_pod_annotations": extra_annotations,
                     "worker_extra_pod_annotations": extra_annotations,
                     "scheduler_extra_pod_labels": extra_labels,
                     "worker_extra_pod_labels": extra_labels,
                 }
             return Options(
                 Integer("worker_cores", 2, min=1, max=32, label="Worker Cores"),
                 Float("worker_memory", 4, min=1, max=120, label="Worker Memory (GiB)"),
                 String("image", default="pangeo/pangeo-notebook:latest", label="Image"),
                 handler=option_handler,
             )
          c.Backend.cluster_options = cluster_options
      backend:
        worker:
          extraPodConfig:
            tolerations:
              - key: "cloud.google.com/gke-preemptible"
                operator: "Equal"
                value: "true"
                effect: "NoSchedule"
